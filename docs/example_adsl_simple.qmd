---
title: "ADSL Dataset Example"
format:
  html:
    code-fold: false
execute:
  echo: true
  warning: false
---

## Introduction

This example demonstrates how to generate an ADSL (Analysis Dataset Subject Level) dataset using the ADaM YAML specification system.

## Setup

First, let's import the necessary libraries and load our specification:

```{python}
import sys
import os
sys.path.insert(0, os.path.abspath(".."))

import polars as pl
from adamyaml.adam_derivation import AdamDerivation
from adamyaml.adam_spec import AdamSpec
```

## Load and Examine the Specification

Let's load the ADSL specification and examine its structure:

```{python}
# Load the specification
spec = AdamSpec("../spec/study1/adsl_study1.yaml")

# Display basic information
print(f"Domain: {spec.domain}")
print(f"Number of columns: {len(spec.columns)}")
print(f"Key variables: {spec.key}")
```

## View Column Specifications

Let's look at the column specifications in a table format:

```{python}
# Display columns as a table
print("\nColumn Specifications:")
print("-" * 80)
print(f"{'Name':<15} {'Type':<10} {'Core':<20} {'Label':<35}")
print("-" * 80)

for col in spec.columns[:10]:  # Show first 10 columns
    label = col.label[:32] + "..." if len(col.label) > 35 else col.label
    print(f"{col.name:<15} {col.type:<10} {col.core or 'N/A':<20} {label:<35}")
    
print(f"\n... and {len(spec.columns) - 10} more columns")
```

## Generate the Dataset

Now let's generate the actual ADSL dataset:

```{python}
# Create the derivation engine
engine = AdamDerivation("../spec/study1/adsl_study1.yaml")

# Build the dataset
df = engine.build()

print(f"Dataset shape: {df.shape}")
print(f"Number of columns: {len(df.columns)}")
```

## Explore the Generated Data

Let's look at the first few records:

```{python}
# Display first few rows
print("\nFirst 5 subjects:")
print(df.select(["USUBJID", "AGE", "SEX", "RACE", "ARM"]).head())
```

## Data Quality Summary

Let's create a summary of data completeness:

```{python}
# Calculate completeness for key variables
print("\nData Completeness Summary:")
print("-" * 60)
print(f"{'Column':<20} {'Non-Null':<12} {'Total':<12} {'% Complete':<12}")
print("-" * 60)

key_columns = ["USUBJID", "AGE", "SEX", "RACE", "ARM", "SITEID", "COUNTRY"]
for col in key_columns:
    if col in df.columns:
        non_null = df[col].drop_nulls().len()
        total = df.height
        completeness = (non_null / total) * 100
        print(f"{col:<20} {non_null:<12} {total:<12} {completeness:>11.1f}%")
```

## Save the Dataset

Finally, let's save the generated dataset:

```{python}
# Save the dataset
output_path = engine.save()
print(f"\nDataset saved to: {output_path}")
```

## Conclusion

This example demonstrated how to use the ADaM YAML system to:
1. Load and examine ADaM specifications
2. Generate ADSL datasets from SDTM data
3. Explore data quality and completeness
4. Save the final dataset in parquet format